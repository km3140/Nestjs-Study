- nestjs는 반드시 main.ts파일을 가져야한다, main.ts에서 시작

- app.modules = 루트모듈

- 컨트롤러는 express의 라우터와 비슷
  url을 가져오고 함수를 실행

- 데코레이터는 get,post와 같은 함수와 비슷

- Service : 비즈니스 로직(함수들)이 담겨있는 파일

- @Res(), @Req()와 같은 decorator로 express를 직접 사용할 수 있다
  하지만 비추, 왜냐면 fastify로 전환됐을 때 오류남
  nestjs는 express와 fastify 두 프레임워크에서 돌아갈 수 있기 때문
  기본적으론 express인데 이걸 fastify로 바꿀 수 있다
  근데 저렇게 쓰면 바꿨을 때 오류난다고함
  nestjs의 방식만 사용하면 언제든지 express와 fastify를 오류없이 스위칭 할 수 있다
  (fastify가 express보다 2배정도 빠르다고 함, 성능향상을 위해선 fastity가 최고라고 함)

- e2e test: 사용자 스토리, 사용자가 취할만한 액션을 처음부터 끝까지 테스트
            해당 url에서 나올 수 있는 경우들 테스트?
            Controller, Service, Pipe 모든 것을 테스트하고 있음

- jest) it : individual test

- 단위 하나당 describe

- Statements: 전체 코드중 명령문이 몇 개이고 얼마나 실행되었는가?
  Branches: 전체 코드중 분기문이 몇 개이고 얼마나 실행되었는가?
  Functions: 전체 코드중 함수가 몇 개이고 얼마나 실행되었는가?
  Lines: 전체 코드라인이 몇 개이고 얼마나 많이 실행되었는가?

- beforeEach에서 앱을 계속 새로 만들어서 로컬스토리지가 계속 초기화됨

- 파이프를 사용하는 방법(Binding pipes)은 세가지로 나뉘어 질 수 있다
  Handler-level Pipes, Parameter-level Pipes, Global-level Pipes

- DB관련 작업은 Repository에서 이루어진다
  요청 -> Controller -> Service -> Repository -> Service -> Controller -> 응답

- typeORM 3.x.x에서 바뀐 게 너무 많음 ㅠ

- typeORM 3.x.x에서부터 repository를 providers에 추가, 그래서 service에 @InjectRepository(레포)할 필요가 없는듯?